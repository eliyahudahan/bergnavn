"""Add ships table with methanol support

Revision ID: 446506ff1f1c
Revises: 47e53f867723
Create Date: 2025-10-28 13:29:46.251643

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2
from geoalchemy2.types import Geometry

# revision identifiers, used by Alembic.
revision = '446506ff1f1c'
down_revision = '47e53f867723'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ship_type_coefficients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ship_type', sa.String(length=20), nullable=False),
    sa.Column('base_consumption_coef', sa.Float(), nullable=False),
    sa.Column('optimal_speed_knots', sa.Float(), nullable=False),
    sa.Column('fuel_cost_usd_tonne', sa.Float(), nullable=False),
    sa.Column('maintenance_impact', sa.Float(), nullable=False),
    sa.Column('methanol_consumption_ratio', sa.Float(), nullable=True),
    sa.Column('methanol_cost_usd_tonne', sa.Float(), nullable=True),
    sa.Column('validation_status', sa.String(length=20), nullable=True),
    sa.Column('last_calibration_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ship_type')
    )
    op.create_table('ships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mmsi', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('length', sa.Float(), nullable=True),
    sa.Column('draft', sa.Float(), nullable=True),
    sa.Column('built_year', sa.Integer(), nullable=True),
    sa.Column('home_port', sa.String(length=50), nullable=True),
    sa.Column('fuel_efficiency_profile', sa.JSON(), nullable=True),
    sa.Column('operational_constraints', sa.JSON(), nullable=True),
    sa.Column('alternative_fuel_capability', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mmsi')
    )
    op.create_table('fuel_efficiency_calculations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ship_id', sa.Integer(), nullable=False),
    sa.Column('voyage_leg_id', sa.Integer(), nullable=True),
    sa.Column('current_speed', sa.Float(), nullable=False),
    sa.Column('weather_wind_speed', sa.Float(), nullable=True),
    sa.Column('weather_wind_direction', sa.Float(), nullable=True),
    sa.Column('optimal_speed', sa.Float(), nullable=False),
    sa.Column('fuel_saving_percent', sa.Float(), nullable=False),
    sa.Column('estimated_savings_usd_hour', sa.Float(), nullable=False),
    sa.Column('efficiency_class', sa.String(length=10), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('algorithm_version', sa.String(length=20), nullable=True),
    sa.Column('alternative_fuel_type', sa.String(length=20), nullable=True),
    sa.Column('alternative_fuel_savings', sa.Float(), nullable=True),
    sa.Column('calculated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ),
    sa.ForeignKeyConstraint(['voyage_leg_id'], ['voyage_legs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('dummy_users')
    op.add_column('base_routes', sa.Column('geometry', Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    # הערה: האינדקסים כבר קיימים - לא צריך ליצור אותם שוב
    # op.create_index('idx_base_routes_geometry', 'base_routes', ['geometry'], unique=False, postgresql_using='gist')
    op.drop_column('base_routes', 'is_multi_stop')
    op.drop_column('base_routes', 'last_updated')
    op.add_column('hazard_zones', sa.Column('risk_score', sa.Float(), nullable=True))
    op.alter_column('hazard_zones', 'hazard_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('hazard_zones', 'geometry',
               existing_type=sa.TEXT(),
               type_=Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               nullable=True)
    # הערה: האינדקסים כבר קיימים - לא צריך ליצור אותם שוב
    # op.create_index('idx_hazard_zones_geometry', 'hazard_zones', ['geometry'], unique=False, postgresql_using='gist')
    op.add_column('route_files', sa.Column('file_content', sa.LargeBinary(), nullable=False))
    op.alter_column('route_files', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('route_files', 'file_type')
    op.add_column('route_legs', sa.Column('leg_index', sa.Integer(), nullable=False))
    op.add_column('route_legs', sa.Column('distance_nm', sa.Float(), nullable=True))
    op.add_column('route_legs', sa.Column('eta_minutes', sa.Float(), nullable=True))
    op.alter_column('route_legs', 'geometry',
               existing_type=sa.TEXT(),
               type_=Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               existing_nullable=True)
    # הערה: האינדקסים כבר קיימים - לא צריך ליצור אותם שוב
    # op.create_index('idx_route_legs_geometry', 'route_legs', ['geometry'], unique=False, postgresql_using='gist')
    op.drop_column('route_legs', 'end_time')
    op.drop_column('route_legs', 'sequence')
    op.drop_column('route_legs', 'start_time')
    op.alter_column('voyage_legs', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('voyage_legs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('voyage_legs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint('voyage_legs_departure_port_id_fkey', 'voyage_legs', type_='foreignkey')
    op.drop_constraint('voyage_legs_arrival_port_id_fkey', 'voyage_legs', type_='foreignkey')
    op.create_foreign_key(None, 'voyage_legs', 'ports', ['departure_port_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'voyage_legs', 'ports', ['arrival_port_id'], ['id'], ondelete='SET NULL')
    op.add_column('waypoints', sa.Column('position', Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    op.add_column('waypoints', sa.Column('order_index', sa.Integer(), nullable=False))
    # הערה: האינדקסים כבר קיימים - לא צריך ליצור אותם שוב
    # op.create_index('idx_waypoints_position', 'waypoints', ['position'], unique=False, postgresql_using='gist')
    op.drop_column('waypoints', 'geometry')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('waypoints', sa.Column('geometry', sa.TEXT(), autoincrement=False, nullable=True))
    # הערה: האינדקסים כבר קיימים - לא צריך למחוק אותם
    # op.drop_index('idx_waypoints_position', table_name='waypoints', postgresql_using='gist')
    op.drop_column('waypoints', 'order_index')
    op.drop_column('waypoints', 'position')
    op.drop_constraint(None, 'voyage_legs', type_='foreignkey')
    op.drop_constraint(None, 'voyage_legs', type_='foreignkey')
    op.create_foreign_key('voyage_legs_arrival_port_id_fkey', 'voyage_legs', 'ports', ['arrival_port_id'], ['id'])
    op.create_foreign_key('voyage_legs_departure_port_id_fkey', 'voyage_legs', 'ports', ['departure_port_id'], ['id'])
    op.alter_column('voyage_legs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('voyage_legs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('voyage_legs', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.add_column('route_legs', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('route_legs', sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('route_legs', sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    # הערה: האינדקסים כבר קיימים - לא צריך למחוק אותם
    # op.drop_index('idx_route_legs_geometry', table_name='route_legs', postgresql_using='gist')
    op.alter_column('route_legs', 'geometry',
               existing_type=Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('route_legs', 'eta_minutes')
    op.drop_column('route_legs', 'distance_nm')
    op.drop_column('route_legs', 'leg_index')
    op.add_column('route_files', sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.alter_column('route_files', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('route_files', 'file_content')
    # הערה: האינדקסים כבר קיימים - לא צריך למחוק אותם
    # op.drop_index('idx_hazard_zones_geometry', table_name='hazard_zones', postgresql_using='gist')
    op.alter_column('hazard_zones', 'geometry',
               existing_type=Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('hazard_zones', 'hazard_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('hazard_zones', 'risk_score')
    op.add_column('base_routes', sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('base_routes', sa.Column('is_multi_stop', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    # הערה: האינדקסים כבר קיימים - לא צריך למחוק אותם
    # op.drop_index('idx_base_routes_geometry', table_name='base_routes', postgresql_using='gist')
    op.drop_column('base_routes', 'geometry')
    op.create_table('dummy_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('scenario', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('flags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('nationality', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('preferred_sailing_areas', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dummy_users_pkey'),
    sa.UniqueConstraint('email', name='dummy_users_email_key'),
    sa.UniqueConstraint('username', name='dummy_users_username_key')
    )
    op.drop_table('fuel_efficiency_calculations')
    op.drop_table('ships')
    op.drop_table('ship_type_coefficients')
    # ### end Alembic commands ###